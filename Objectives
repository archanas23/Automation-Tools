#!/usr/bin/perl

#===============================================================================
# This PERL script is to generate the objectives from Input Range Table (IRT),
# Singularity Table (ST), Stub sections and appends them to the test cases
#===============================================================================



package Checklist;
#use 5.10.0;
#use strict;
#use warnings;
use Win32;
use File::Find qw(find);
use File::Basename;
use Test;
use IO::Handle;
use Benchmark qw/cmpthese timethese/;
use Data::Dumper;
use Carp;
#use List::Util 'first'; 
my @ListTestcases =();
my @Testcase =();
my %hash =();
my @TestcaseIRT=();
my @TestcaseST=();
#enter the directory path 
my $dir_path;
my $filename;
my $line ;
my @file_name_arr="";
my $dirname;
#list of Placeholders for the 7 different Parameters listed in IRT
my $list_min ;
my $list_max ;
my $list_Zero ;
my $mid_Pos ;
my $mid_Neg ;
my $OutBou_lo ;
my $OutBou_hi ;
#list of Placeholders for the 4 different Parameters listed in ST
my $STCond;
my $NMinus;
my $NValue;
my $NPosit;
my @identlines = ();
my @identSingLine = ();
my @ListTestcases =();
my @value=();
my @objfiles =();
my @min_list=();
my @midNeg_list=();
my @zero_list=();
my @midpos_List =();
my @max_list=();
my @ob_lolist =();
my @ob_hiList=();
my @Uniqmin_list=();
my @UniqmidNeg_list=();
my @Uniqzero_list=();
my @Uniqmidpos_List =();
my @Uniqmax_list=();
my @Uniqob_lolist =();
my @Uniqob_hiList=();
my @STList=();
my @NNeg=();
my @Nval=();
my @NPlus=();
my @uniqNMinus=();
my @uniqNCond=();
my @uniqNPlus=();
my @objfiles;
my %ST_Obj=();
my %IRT_Obj=();
my $tcNum;
my $stubName=""; my %items; my %params;
my %IRTEntries;
my @Rule =("min", "mid-ve", "zero", "mid+ve", "max", "ob low", "ob high");
my @Singularity = ("N-1", "N", "N+1");  # ,'N+1' ,'N-1', 'Singularity');


my $out;
$file_path=$ARGV[0];

    if($ARGV[0] =~ /(.*)\.tcf/)
    { 
		$out=$file_path;
		$out=~ s/\.tcf/_upd.tcf/;
		#$out = join("_upd","$file_path",".tcf");
        #$out = $file_name_arr[0]."_upd.tcf";


        undef @ListTestcases;
        undef @objfiles;
        undef %hash;
        undef @Testcase;
        undef @ListTestcases;
        undef @objfiles;
        undef %hash;
        undef @Testcase;
        undef @TestcaseIRT;
        undef @TestcaseST;
        local $buffer ;
        local $bufferSing ;
        undef @identlines;
        undef @ListTestcases;
        undef @value;
        undef @identSingLine;
        undef @objfiles;        
        undef @min_list;
        undef @midNeg_list;
        undef @zero_list;
        undef @midpos_List;
        undef @max_list;
        undef @ob_lolist;
        undef @ob_hiList;
        undef @Uniqmin_list;
        undef @UniqmidNeg_list;
        undef @Uniqzero_list;
        undef @Uniqmidpos_List;
        undef @Uniqmax_list;
        undef @Uniqob_lolist;
        undef @Uniqob_hiList;       
        undef @STList;
        undef @NNeg;
        undef @Nval;
        undef @NPlus; 
        undef @uniqNMinus;
        undef @uniqNCond;
        undef @uniqNPlus;
        undef %ST_Obj;
        undef %IRT_Obj;
        %IRTEntries =0;
        my $inputLineIRT=0;
        my $inputLineST=0;
        my $flag_blankIRT =1;
        my $flag_blankST =1;
        #open(OUTFILE,">","$dir_path/$filename.csv") or die $!;
        # Change the Filehandle to redirect Console Output.
        #STDOUT->fdopen( \*OUTFILE, 'w' ) or die $!;   
        &ListIRT; 
        &ListTestcases;  # Parse and Create an Array for the Total Number of testcases
		&Read_Stub_Objectives;
        if ($flag_blankIRT) #check if the Section is Present
        {
           #print("VariableName|Minimum|MidNegative|Zero|MidPositive|Maximum|OutBoundLow|OutBoundHigh"."\n");
            @identlines = split ("\n", $buffer);
            my $inputLine=0;  
            foreach my $val (@identlines)
            {               
                $list_min = "" ;
                $list_max ="";
                $list_Zero ="" ;
                $mid_Pos ="";
                $mid_Neg ="";
                $OutBou_lo ="";
                $OutBou_hi ="";             
             $val =~ s/^\s+|\s+$//g ;   #remove spaces and Trim the values             
             @value = split (/\|/, $val);        
                #TODO find a method to ensure that End of File is used to Align the Tables
                if (@value[1] !~ m/NA/i)  { $list_var= @value[1];}  else{$list_var=0;}               
                if (@value[4] !~ m/NA/i)  { $list_min= @value[4];}  else{$list_min=0;}              
                if (@value[5] !~ m/NA/i)  { $mid_Neg=  @value[5];}  else{$mid_Neg=0; } 
                if (@value[6] !~ m/NA/i)  { $list_Zero=@value[6];}  else{$list_Zero=0;} 
                if (@value[7] !~ m/NA/i)  { $mid_Pos=  @value[7];}  else{$mid_Pos=0;}   
                if (@value[8] !~ m/NA/i)  { $list_max= @value[8];}  else{$list_max=0;} 
                if (@value[9] !~ m/NA/i)  { $OutBou_lo=@value[9];}  else{$OutBou_lo=0;} 
                if (@value[10] !~ m/NA/i) { $OutBou_hi=@value[10];} else{$OutBou_hi=0;}                 
                # Update the List of Variables into a Buffer here.                
                    
                    my $varname = $list_var; 
                    $varname =~ s/^\s+|\s+$//g;                
                    $list_min =~ s/^\s+|\s+$//g ;  #remove spaces and Trim the values
                    $mid_Neg =~ s/^\s+|\s+$//g ;  #remove spaces and Trim the values
                    $list_Zero =~ s/^\s+|\s+$//g ;  #remove spaces and Trim the values
                    $mid_Pos =~ s/^\s+|\s+$//g ;  #remove spaces and Trim the values
                    $list_max =~ s/^\s+|\s+$//g ;  #remove spaces and Trim the values
                    $OutBou_lo =~ s/^\s+|\s+$//g ;  #remove spaces and Trim the values
                    $OutBou_hi =~ s/^\s+|\s+$//g ;  #remove spaces and Trim the values                                
                    #Print the Table
                    #print ($inputLine+1);  #TODO   DEBUG Code here
                    #print "::".$list_var."\t".$list_min."\t".$mid_Neg."\t".$list_Zero."\t".$mid_Pos."\t".$list_max."\t".$OutBou_lo."\t".$OutBou_hi."\n";
                    if (($list_min ne 0) && ($list_Zero ne 0) && ($list_min eq $list_Zero))
					{
						$IRT_Obj{$list_Zero}{7}.="    \'$varname\'"."\n"; 	
                    }
                    else
					{
						if ($list_min ne 0)
						{
							  $IRT_Obj{$list_min}{0}.="    \'$varname\'"."\n"; 
						}
						if ($list_Zero ne 0)
						{
							  $IRT_Obj{$list_Zero}{2}.="    \'$varname\'"."\n"; 
						}
                    }
					if ($mid_Neg ne 0)
					{
						  $IRT_Obj{$mid_Neg}{1}.="    \'$varname\'"."\n"; 
					}
						
                    if ($mid_Pos ne 0)
                    {
                          $IRT_Obj{$mid_Pos}{3}.="    \'$varname\'"."\n"; 
                    }
                    if ($list_max ne 0)
                    {
                          $IRT_Obj{$list_max}{4}.="    \'$varname\'"."\n"; 
                    }
                    if ($OutBou_lo ne 0)
                    {
                          $IRT_Obj{$OutBou_lo}{5}.="    \'$varname\'"."\n"; 
                    }
                    if ($OutBou_hi ne 0)
                    {
                          $IRT_Obj{$OutBou_hi}{6}.="    \'$varname\'"."\n"; 
                    }



               # Create a Unique List of testcases based on the Rule
               #Task#1  -                  #TODO:  Create a Matrix here               
               #Clear the Matrix Elements
               for my $ruleset (0..6)
               {
                   for ($i=0; $i < 1; $i++)
                   {  
                    $TestcaseIRT[$inputLine][$ruleset][$i] = 0;                    
                   }
               }        # Cleared all the Matrix Elements 
               $IRTEntries{$list_var}= '';
               for my $ruleset (0..6)
               {                     
                                      $TestcaseIRT[$inputLine][$ruleset][0] = $varname;  #Done
                                      $TestcaseIRT[$inputLine][$ruleset][1] = uc($Rule[$ruleset]);                                                                       
                   if ($ruleset==0)  {$TestcaseIRT[$inputLine][$ruleset][2] = $list_min;}
                   if ($ruleset==1)  {$TestcaseIRT[$inputLine][$ruleset][2] = $mid_Neg;}
                   if ($ruleset==2)  {$TestcaseIRT[$inputLine][$ruleset][2] = $list_Zero;}
                   if ($ruleset==3)  {$TestcaseIRT[$inputLine][$ruleset][2] = $mid_Pos;}
                   if ($ruleset==4)  {$TestcaseIRT[$inputLine][$ruleset][2] = $list_max;}
                   if ($ruleset==5)  {$TestcaseIRT[$inputLine][$ruleset][2] = $OutBou_lo;}
                   if ($ruleset==6)  {$TestcaseIRT[$inputLine][$ruleset][2] = $OutBou_hi;}                               
               }              
            $inputLine++;                         
            }       # Complete parsing all Lines
            #print Dumper(@TestcaseIRT);      #TODO: For Debug
            $inputLineIRT = $inputLine;
        }           # End of the IRT Block         
        &ListST; 
        if ($flag_blankST) # if the Singularity Block is Present
        {
           @identSingLine = split ("\n", $bufferSing);                      
           undef @value;           
           my $inputLine=0;
           my $largeLine='';
           #print("\nSingularity Condition |N-1 Condition|N Condition|N+1 Condition"."\n");          
           foreach my $val (@identSingLine)
            {
                if($val !~ m/\|$/)
                {
                #$largeLine = $val
                }
                $largeLine .= $val;
                # Handle Multiple Line Joins for the Input variable in ST Here
                if ($largeLine =~ ( m/\|$/ ))           #(length($val) <100) &&
                {              
                    #print Dumper($largeLine);
                     $STCond="";
                     $NMinus="";
                     $NValue="";
                     $NPosit="";
                     $largeLine =~ s/^\s+|\s+$//g ;   #remove spaces and Trim the values
                     @value = split (/\|/, $largeLine);   
                    if (@value[1] !~ m/NA\d+/i) { $STCond= @value[1];}  else{$STCond=0;} #print $NMinus."\t"; 
                    if (@value[2] !~ m/NA/i) { $NMinus= @value[2];}  else{$NMinus=0;} #print $NMinus."\t";                
                    if (@value[3] !~ m/NA/i) { $NValue= @value[3];}  else{$NValue=0;} #print $NValue."\t";                
                    if (@value[4] !~ m/NA/i) { $NPosit= @value[4];}  else{$NPosit=0;} #print $NPosit."\t";
					$value[1] =~ s/^\s+//;
                    $value[1] =~ s/\s+$//;
					$value[2] =~ s/^\s+//;
                    $value[2] =~ s/\s+$//;
					$value[3] =~ s/^\s+//;
                    $value[3] =~ s/\s+$//;
					$value[4] =~ s/^\s+//;
                    $value[4] =~ s/\s+$//;
					if (@value[2] !~ m/NA/i)
					{
						$ST_Obj{@value[2]}{0}.="    \"$value[1]\""."\n";
						#print "check1: $ST_Obj{@value[2]}{0}\n";
					}
					if (@value[3] !~ m/NA/i)
					{
						$ST_Obj{$value[3]}{1}.="    \"$value[1]\""."\n";
						#print "check2: $ST_Obj{@value[3]}{0}\n";
					}
					if (@value[4] !~ m/NA/i)
					{
						$ST_Obj{$value[4]}{2}.="    \"$value[1]\""."\n";
						#print "check3: $ST_Obj{@value[4]}{0}\n";
					}
                    # Update the List of Variables into a Buffer here.
                    $STCond =~ s/^\s+|\s+$//g ;  #remove spaces and Trim the values
                    $NMinus =~ s/^\s+|\s+$//g ;  #remove spaces and Trim the values
                    $NValue =~ s/^\s+|\s+$//g ;  #remove spaces and Trim the values
                    $NPosit =~ s/^\s+|\s+$//g ;  #remove spaces and Trim the values                
                    #Print the Table     
                    #print ($inputLine+1);  #TODO   DEBUG Code here
                    #print "::".$STCond."\t".$NMinus."\t".$NValue."\t".$NPosit."\n";                     
                    #Task#1  -                  #TODO:  Create a Matrix here
                    #Clear the Matrix Elements
                    for my $singlty (0..2)
                    {
                       for ($i=0; $i < 1; $i++)
                       {  
                        $TestcaseST[$inputLine][$singlty][$i] = 0;
                       }
                    }        # Cleared all the Matrix Elements         
                    for my $singlty (0..2)
                    {   
                                          $TestcaseST[$inputLine][$singlty][0] = $STCond;  #Done
                                          $TestcaseST[$inputLine][$singlty][1] = $Singularity[$singlty];                                                                       
                       if ($singlty==0)  {$TestcaseST[$inputLine][$singlty][2] = $NMinus;}
                       if ($singlty==1)  {$TestcaseST[$inputLine][$singlty][2] = $NValue;}
                       if ($singlty==2)  {$TestcaseST[$inputLine][$singlty][2] = $NPosit;}                               
                    }
                    $inputLine++;
                    undef $largeLine;
                }
                #Append the Previous line and rerun    
            }       # Complete parsing all Lines               
            $inputLineST =$inputLine;
        }           # End of the Singularity Table Block
        #print "\n";
		#print O Dumper(\%ST_Obj);     #TODO: For Debug
		#&printAllST_Objectives;
        #print "\n";
        #print "++++++++++++++++++++++++\n";
        #print Dumper(@TestcaseST);     #TODO: For Debug		
        #print "\n+++++++++++++++++++++++++++++++++\n";
        #print "| TestCondition |    Input |            Condition  |Testcase    | Result\n";
        # Parse the IRT Table
            foreach my $t (@ListTestcases)
            {
                #Parse the Test Sections to generate the KVP
                &ParseTestSections($t);  #TODO: For Debug
            }
     
            #DONE  Print the Objectives to the TCFCSV File
            #print "\n++++++++++++List of Objectives Follows++++++++++++++++++\n";
            #&printObjectives;			## IF YOU need the Objectives Printed
            #print "\n";
			&printAll_Objectives;
			Win32::MsgBox ("TCF is updated\n\nGet the updated file from below path\n $out",
						   64+0,
						   TaskCompleted);
			#&printAllST_Objectives;
			#print O Dumper(\%ST_Obj);
            #print "\n";
            #&printAllIRT_Objectives;
			#print Dumper(\%IRT_Obj);
        #close(OUTFILE);      # close the OUTFILE per file
		#close(O);
    }   # End of the If Loop


sub ListTestcases
{
#opens the file inside the dir
open(FP,"$file_path")or die( "cannot open the file:$file_path\n");

#my $TCFFile = $filename;
my $tc_no;
while (<FP>)	
{
if ( s/ Description = TEST//ig) 
    {
     my $str=$_; 
     $str =~ s/^\s+|\s+$//g ;
     push (@ListTestcases, $str); 
	 $tc_no=$str;
     $ST_Obj{$tc_no}{0}="";
     $ST_Obj{$tc_no}{1}="";
     $ST_Obj{$tc_no}{2}="";
     $IRT_Obj{$tc_no}{0}="";
     $IRT_Obj{$tc_no}{1}="";
     $IRT_Obj{$tc_no}{2}="";
     $IRT_Obj{$tc_no}{3}="";
     $IRT_Obj{$tc_no}{4}="";
     $IRT_Obj{$tc_no}{5}="";
     $IRT_Obj{$tc_no}{6}="";
     $IRT_Obj{$tc_no}{7}="";

    }
}
close(FP);
}    

sub ParseTestSections
{
    #opens the file inside the dir
    open(FP,"$file_path")or die( "cannot open the file:$filename\n");

    my $buffer =();
    my $testcase =();
    my $TestNumber = "";
    $TestNumber = $_[0];  # Prepare this Array for the testcase
    $TestNumber =~ s/^\s+|\s+$//g ; #remove spaces and Trim the values
    OUTER:
    while (<FP>)	
    {          
    if(m/Description = TEST $TestNumber/i)
        {            
            while(<FP>) 
            {             
             $_ =~ s/[\x0A\x0D]//g; # to Strip lines of Extra Characters
             if (m/Control Flow/i)
              { last OUTER;}
             # skip blank lines
             next if /^[ \t]*$/;
             # skip comment lines
             next if /#/;
             # skip if not starting with a number ..thats the bullet items or objectives ..rest are not the lines to check for rules. 
#             next if /^\D[.](.\s)?+/;
             $testcase .=$_;
             $testcase .= "\n";  # Added New line to Split by Order
            }
        }        
    }  
    push (@objfiles,$testcase);
    $Testcase[@objfiles][0] =$TestNumber;
    $Testcase[@objfiles][1] =$testcase; 
    $Testcase[@objfiles][2] =@objfiles;   
    #create the Multi Dimensional Array here
    #print Dumper(@Testcase);  #TODO   Debug to check all Objectives for each Testcase
close(FP);    # Close the opened TCF
}

# Recursively run on each Line/Objective and get the Inputs and Objectives
sub LineSplitter #TODO:  Need help with this here.
{
my $IRT=$ST=$testnumber=0;
my $line = $_[0];    
$IRT = $_[1];  # if it is for IRT, call form (X,1,0,y)
$ST = $_[2];   # if it is for ST, call form (X,0,1,y)
$testnumber = $_[3];
#$print $testnumber."\n";     #TODO for Debug
my @LineObject ='';
    if ($IRT)
    {
        #if ($line =~ m/\r\n/i)
        {
        @LineObject = split (/[',"]+/,$line);        
        local $MinZero = "Min/Zero|Min and Zero";  #Handle the Min/Zero as Zero Condition here
        #print "+++ ".$LineObject[1]."\t".$LineObject[3]."\t".$testnumber."\n"; #TODO Debug Code
        ($LineObject[1] =~ s/$MinZero/Min/i); 
        #&matchIRT($LineObject[1],$LineObject[3], $testnumber);
        $IRT=0;
        }
    }
    if ($ST)
    {
        #if ($line =~ m/\r\n/i)
        {
        @LineObject = split /[',"]+/,$line;                
        #print "+++ ".$lineObject[1]."\t".$lineObject[3]."\t".$testnumber."\n";
        #&matchST($LineObject[1],$LineObject[3], $testnumber);
        $ST =0;
        }
    }    
    #print Dumper(@LineObject);   #TODO: For Debug
}

sub ListIRT
{
    #opens the file inside the dir
    open(FP,"$file_path")or die( "cannot open the file:$filename\n");

    #my $TCFFile = $filename;
    while (<FP>)	
    {
        if ( /INPUT RANGE/i)
		{
        #$buffer .=$_;  # removed as this is Duplicated
            while (<FP>) 
            {                                    
             if ((m/\|( *)None( *)\|/i) ||( m/---/) || ( m/Variable/i))
                {
                 next;

                }
                else
                {
                $buffer .=$_; 
                last if /^\n$/;    
                }
            }
        }
        #check for Blank Entries returned
        if (($buffer cmp '' ) || ($buffer =~ m/none/i ))
        {
            $flag_blankIRT = 0;
			
        }
        		
    }   
    #print "hi".$buffer;    
close(FP);
}

sub ListST
{
 #opens the file inside the dir
    open(FP,"$file_path")or die( "cannot open the file:$filename\n");
  
    while (<FP>)	
    {
    if ( /SINGULARITY TABLE/i) 
        {            
        #$buffer .=$_;  # skip the Current string
            while (<FP>) 
            {   
                if ((m/\|( *)None/) ||( m/---/) || ( m/Expression/i) ||(m/Test Case Type Table:/i)) # || (m/ /i))
                { next;}
                else
                {
                $bufferSing .=$_;    
                last if ((/^\n$/) ||(m/Test Case Type Table:/i));    
                }
            }
        }
        #check for Blank Entries returned
        if (($bufferSing cmp '' ) ||($bufferSing =~ m/none/i ))
        {
            $flag_blankST = 0;
        }        
    } 
close(FP);
}    

sub printAll_Objectives
{
    ## If all the Input Conditions in the IRT are matched then Generate "Success"


	open(F,"$file_path") or die $!;

	open(O,">","$out") or die $!;

	my $line;
	my $objNum=0;
	my $idx=0;
	while(<F>)
	{
		$objNum = $1 if(/^\s*(\d+)\s*(.*)/);
		if(/^\s*Control\s*Flow/)
		{ 
			$line = $_;
		   #print O "Test Case: '$TC'\n";
		   if ($ST_Obj{$ListTestcases[$idx]}{0} ne "")
		   {
			$objNum=$objNum+1;
			print O " ".$objNum.". To verify the 'N-1' singularity of the following expression(s):\n"."$ST_Obj{$ListTestcases[$idx]}{0}\n";
		   }
		   if ($ST_Obj{$ListTestcases[$idx]}{1} ne "")
		   {
			$objNum=$objNum+1;
			print O " ".$objNum.". To verify the 'N' singularity of the following expression(s):\n"."$ST_Obj{$ListTestcases[$idx]}{1}\n";
		   }
		   if ($ST_Obj{$ListTestcases[$idx]}{2} ne "")
		   {
			 $objNum=$objNum+1;
			 print O " ".$objNum.". To verify the 'N+1' singularity of the following expression(s):\n"."$ST_Obj{$ListTestcases[$idx]}{2}\n";
		   }

		   if ($IRT_Obj{$ListTestcases[$idx]}{7} ne "")
		   {
			 $objNum=$objNum+1;
			 print O " ".$objNum.". To verify the 'Min/Zero' value of the following variable(s):\n"."$IRT_Obj{$ListTestcases[$idx]}{7}\n";
		   }
		   if ($IRT_Obj{$ListTestcases[$idx]}{0} ne "")
		   {
			$objNum=$objNum+1;
			print O " ".$objNum.". To verify the 'Min' value of the following variable(s):\n"."$IRT_Obj{$ListTestcases[$idx]}{0}\n";
		   }
		   if ($IRT_Obj{$ListTestcases[$idx]}{1} ne "")
		   {
			$objNum=$objNum+1;
			print O " ".$objNum.". To verify the 'Mid-ve' value of the following variable(s):\n"."$IRT_Obj{$ListTestcases[$idx]}{1}\n";
		   }
		   if ($IRT_Obj{$ListTestcases[$idx]}{2} ne "")
		   {
			 $objNum=$objNum+1;
			 print O " ".$objNum.". To verify the 'Zero' value of the following variable(s):\n"."$IRT_Obj{$ListTestcases[$idx]}{2}\n";
		   }
		   if ($IRT_Obj{$ListTestcases[$idx]}{3} ne "")
		   {
			$objNum=$objNum+1;
			print O " ".$objNum.". To verify the 'Mid+ve' value of the following variable(s):\n"."$IRT_Obj{$ListTestcases[$idx]}{3}\n";
		   }
		   if ($IRT_Obj{$ListTestcases[$idx]}{4} ne "")
		   {
			$objNum=$objNum+1;
			print O " ".$objNum.". To verify the 'Max' value of the following variable(s):\n"."$IRT_Obj{$ListTestcases[$idx]}{4}\n";
		   }
		   if ($IRT_Obj{$ListTestcases[$idx]}{5} ne "")
		   {
			 $objNum=$objNum+1;
			 print O " ".$objNum.". To verify the 'OB Low' value of the following variable(s):\n"."$IRT_Obj{$ListTestcases[$idx]}{5}\n";
		   }
		   if ($IRT_Obj{$ListTestcases[$idx]}{6} ne "")
		   {
			 $objNum=$objNum+1;
			 print O " ".$objNum.". To verify the 'OB High' value of the following variable(s):\n"."$IRT_Obj{$ListTestcases[$idx]}{6}\n";
		   }

			foreach(keys %{$items{($idx)+1}})
			{
				$objNum=$objNum+1;
				print O " ".$objNum.". To verify that the \"".$_."\" stub is getting hit ".$items{($idx)+1}{$_}." time(s)\n";
				if($params{($idx)+1}{$_} ne ""){ print O "   with the following values".$params{($idx)+1}{$_}."\n\n";}
				else{ print O "\n";}
			}

		   print O "$line";
		   $objNum=0;
		   $idx++;
		}
		else
		{
			print O $_;
		}
	}
	close(F);
	close(O);
 
}

sub Read_Stub_Objectives
{
	open(F,"$file_path") or die $!;
	while(<F>){
		$tcNum = $1 if(/^\s*Description\s*=\s*TEST\s*M(\d+)\s*$/);
		if(/^\s*#\s*Begin\s*TC\s*Stub\s*$/){
			while(<F>){
				if(/^\s*Procedure\s*=\s*(\S+)\s*$/){ $stubName = $1; $params{$tcNum}{$stubName}=""; }
				
				if(/^\s*Specified\s*=\s*(\d+)\s*$/){ $items{$tcNum}{$stubName} = $1; last; }
				if(/^\s*#\s*Begin\s*TC\s*Stub\s*Input\s*Params\s*$/){
					while(<F>){
						if(/^\s*Name\s*=\s*(\S+)\s*$/){ $params{$tcNum}{$stubName} .= "\n      $1"; }
						if(/^\s*Value\s*=\s*(\S+)\s*$/){ $params{$tcNum}{$stubName} .= " : $1"; last; }
					}
				}
				if(/^\s*#\s*Begin\s*TC\s*Stub\s*Return\s*Value\s*$/){
					while(<F>){
						if(/^\s*Value\s*=\s*(\S+)\s*$/){ $params{$tcNum}{$stubName} .= "\n      Return Value : $1"; last; }
					}
				}
				if(/^\s*#\s*End\s*TC\s*Stub\s*TC\s*Hit\s*Count\s*$/){ $items{$tcNum}{$stubName} = 0; last; }
				if(/^\s*#\s*End\s*TC\s*Stub\s*$/){
					Win32::MsgBox ("Hit count of '$stubName' is not verified in M$tcNum",16+0,Error);
					$items{$tcNum}{$stubName} = 0; last; }
			}
			
		}
		$stubName="";
	}
	close(F);
}

# End of File
